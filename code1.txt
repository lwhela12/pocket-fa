import { ReactNode, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import Navbar from './Navbar';
import { useAuth } from '../../hooks/useAuth';
import ChatInterface from '../dashboard/ChatInterface';
import { useFinancialAssistant } from '../../lib/financial-assistant-context';

type DashboardLayoutProps = {
  children: ReactNode;
  title?: string;
};

export default function DashboardLayout({ 
  children,
  title = 'Dashboard | Pocket Financial Advisor',
}: DashboardLayoutProps) {
  const { user, loading } = useAuth();
  const { isChatPanelVisible } = useFinancialAssistant();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !user) {
      router.push('/auth/login');
    }
  }, [user, loading, router]);

  if (loading || !user) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-center">
          <div className="mb-4 h-12 w-12 animate-spin rounded-full border-b-2 border-primary"></div>
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Pocket Financial Advisor dashboard" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-gray-100">
        <Navbar />

        <div className="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex gap-6 min-h-[calc(100vh-8rem)]">
            {/* Main Content */}
            <main 
              className={`flex-1 transition-all duration-300 ease-in-out ${
                isChatPanelVisible ? 'mr-0' : 'mr-0'
              }`}
            >
              <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-white/20 shadow-xl p-6">
                {children}
              </div>
            </main>

            {/* Chat Panel */}
            {isChatPanelVisible && (
              <div className="w-[400px] min-w-[350px] max-w-[500px] transition-all duration-300 ease-in-out">
                <div className="h-full bg-white/90 backdrop-blur-md rounded-2xl border border-white/30 shadow-2xl overflow-hidden">
                  <ChatInterface />
                </div>
              </div>
            )}
          </div>
        </div>

        <footer className="border-t border-white/20 bg-white/50 backdrop-blur-sm py-6">
          <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <p className="text-center text-sm text-gray-500">
              &copy; {new Date().getFullYear()} Pocket Financial Advisor. All rights reserved.
            </p>
          </div>
        </footer>
      </div>
    </>
  );
}
import { useRef, useEffect, memo, useState } from 'react';
import ReactMarkdown from 'react-markdown';
import { useFinancialAssistant, Message } from '../../lib/financial-assistant-context';

const MemoizedMessage = memo(function MessageComp({ message }: { message: Message }) {
  if (message.sender === 'ai' && message.text.length === 0) {
    return null;
  }

  return (
    <div className={`mb-4 flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
      <div className={`rounded-2xl px-4 py-3 max-w-[85%] ${
        message.sender === 'user' 
          ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-lg' 
          : 'bg-gradient-to-r from-gray-100 to-gray-50 text-gray-800 shadow-sm border border-gray-200'
      }`}>
        <ReactMarkdown className="prose prose-sm whitespace-pre-wrap break-words">
          {message.text}
        </ReactMarkdown>
        <p className={`mt-2 text-right text-xs ${
          message.sender === 'user' ? 'text-blue-100' : 'text-gray-400'
        }`}>
          {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
        </p>
      </div>
    </div>
  );
});

export default function ChatInterface() {
  const { toggleChatPanel, messages, addMessage, isTyping } = useFinancialAssistant();
  const [input, setInput] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(true);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  useEffect(() => {
    if (messages.length === 1 && messages[0].sender === 'ai') {
      setShowSuggestions(true);
    } else if (messages.some(m => m.sender === 'user')) {
      setShowSuggestions(false);
    }
  }, [messages]);

  const handleSendMessage = async (e?: React.FormEvent) => {
    if (e) e.preventDefault();
    if (!input.trim()) return;

    const messageToSend = input;
    setInput('');
    setShowSuggestions(false);
    await addMessage(messageToSend);
  };

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
  };

  const suggestedQuestions = [
    'Am I on track for retirement?',
    'How can I reduce my fees?',
    'What questions should I ask my financial advisor?',
    'Explain my asset allocation.'
  ];

  const containerClasses = isFullscreen 
    ? "fixed inset-0 z-50 bg-white/95 backdrop-blur-lg flex flex-col"
    : "flex h-full flex-col";

  return (
    <>
      {isFullscreen && (
        <div 
          className="fixed inset-0 bg-black/50 z-40"
          onClick={toggleFullscreen}
        />
      )}
      
      <div className={containerClasses}>
        {/* Header */}
        <div className="relative bg-gradient-to-r from-blue-500 to-blue-600 px-6 py-4 text-white shadow-lg">
          <button 
            onClick={toggleChatPanel}
            className="absolute -top-2 -right-2 w-7 h-7 bg-red-500/80 hover:bg-red-600 rounded-full flex items-center justify-center text-white text-sm font-medium transition-all duration-200 hover:scale-110 shadow-lg border-2 border-white"
            title="Hide Chat"
          >
            Ã—
          </button>
          
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center font-bold text-lg">
                AI
              </div>
              <h3 className="text-lg font-semibold">Financial Assistant</h3>
            </div>
            
            <button
              onClick={toggleFullscreen}
              className="p-2 hover:bg-white/10 rounded-lg transition-colors duration-200"
              title={isFullscreen ? "Exit Fullscreen" : "Expand"}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                {isFullscreen ? (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4" />
                )}
              </svg>
            </button>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-2" style={{ 
          maxHeight: isFullscreen ? 'calc(100vh - 200px)' : 'calc(100vh - 300px)' 
        }}>
          {messages.map(m => (
            <MemoizedMessage key={m.id} message={m} />
          ))}
          
          {isTyping && (
            <div className="mb-4 flex justify-start">
              <div className="rounded-2xl bg-gradient-to-r from-gray-100 to-gray-50 px-4 py-3 text-gray-800 shadow-sm border border-gray-200">
                <div className="flex space-x-1">
                  <div className="h-2 w-2 animate-bounce rounded-full bg-blue-500" />
                  <div className="h-2 w-2 animate-bounce rounded-full bg-blue-500" style={{ animationDelay: '0.2s' }} />
                  <div className="h-2 w-2 animate-bounce rounded-full bg-blue-500" style={{ animationDelay: '0.4s' }} />
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Suggestions */}
        {showSuggestions && (
          <div className="p-4 border-t border-gray-200/50 bg-gray-50/50">
            <p className="text-xs text-gray-500 mb-3 font-medium">Quick Actions</p>
            <div className="flex flex-wrap gap-2">
              {suggestedQuestions.map(q => (
                <button
                  key={q}
                  className="text-xs bg-white/80 text-gray-700 hover:bg-blue-50 hover:text-blue-700 px-3 py-2 rounded-lg border border-gray-200/80 transition-all duration-200 hover:shadow-sm"
                  onClick={() => {
                    setShowSuggestions(false);
                    addMessage(q);
                  }}
                >
                  {q}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Input */}
        <form className="p-4 border-t border-gray-200/50 bg-white/80" onSubmit={handleSendMessage}>
          <div className="flex gap-3 items-end">
            <div className="flex-1 relative">
              <input
                type="text"
                placeholder="Type your message..."
                className="w-full px-4 py-3 rounded-xl border border-gray-200 bg-white/90 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 shadow-sm"
                value={input}
                onChange={e => setInput(e.target.value)}
              />
            </div>
            <button 
              type="submit" 
              className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:from-blue-600 hover:to-blue-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95 font-medium"
              disabled={!input.trim()}
            >
              Send
            </button>
          </div>
        </form>
      </div>
    </>
  );
}
import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useAuth } from '../../hooks/useAuth';
import { useFinancialAssistant } from '../../lib/financial-assistant-context';

export default function Navbar() {
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);
  const router = useRouter();
  const { user, logout } = useAuth();
  const { toggleChatPanel, isChatPanelVisible } = useFinancialAssistant();

  const handleLogout = () => {
    logout();
  };

  const getInitial = () => {
    if (user?.name) {
      return user.name.charAt(0);
    }
    if (user?.email) {
      return user.email.charAt(0).toUpperCase();
    }
    return 'U';
  };

  return (
    <nav className="bg-white/90 backdrop-blur-md border-b border-white/20 shadow-lg sticky top-0 z-30">
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 justify-between items-center">
          {/* Logo */}
          <div className="flex items-center">
            <Link href="/analyzer" className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">
              Pocket FA
            </Link>
          </div>

          {/* Navigation Links */}
          <div className="hidden sm:flex items-center space-x-2">
            <div className="flex bg-gray-100/80 p-1 rounded-xl">
              <Link
                href="/analyzer"
                className={`px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 ${
                  router.pathname === '/analyzer'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                }`}
              >
                Statement Analyzer
              </Link>
              <Link
                href="/dashboard"
                className={`px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 ${
                  router.pathname === '/dashboard'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                }`}
              >
                Dashboard
              </Link>
            </div>
          </div>

          {/* Right side actions */}
          <div className="flex items-center space-x-4">
            {/* Chat Toggle */}
            <button
              type="button"
              onClick={toggleChatPanel}
              className={`px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 ${
                isChatPanelVisible 
                  ? 'bg-blue-100 text-blue-700 border border-blue-200' 
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200 border border-gray-200'
              }`}
            >
              {isChatPanelVisible ? 'Hide Chat' : 'Show Chat'}
            </button>

            {/* Profile Menu */}
            <div className="relative">
              <button
                type="button"
                className="flex items-center rounded-full bg-gradient-to-r from-blue-500 to-blue-600 text-white p-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105"
                onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
              >
                <span className="sr-only">Open user menu</span>
                <div className="h-8 w-8 rounded-full bg-white/20 flex items-center justify-center font-semibold">
                  {getInitial()}
                </div>
              </button>

              {isProfileMenuOpen && (
                <>
                  <div 
                    className="fixed inset-0 z-10" 
                    onClick={() => setIsProfileMenuOpen(false)}
                  />
                  <div className="absolute right-0 z-20 mt-2 w-56 origin-top-right rounded-xl bg-white/95 backdrop-blur-md py-2 shadow-xl ring-1 ring-black/5 border border-white/20">
                    <div className="px-4 py-3 border-b border-gray-100">
                      <p className="text-sm font-medium text-gray-900">{user?.name || 'User'}</p>
                      <p className="text-sm text-gray-500 truncate">{user?.email}</p>
                    </div>
                    
                    <Link
                      href="/profile"
                      className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      onClick={() => setIsProfileMenuOpen(false)}
                    >
                      Your Profile
                    </Link>
                    <Link
                      href="/profile/settings"
                      className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      onClick={() => setIsProfileMenuOpen(false)}
                    >
                      Settings
                    </Link>
                    <div className="border-t border-gray-100 mt-2 pt-2">
                      <button
                        onClick={() => {
                          handleLogout();
                          setIsProfileMenuOpen(false);
                        }}
                        className="block w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-red-50 transition-colors duration-200"
                      >
                        Sign out
                      </button>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      <div className="sm:hidden border-t border-white/20 bg-white/80">
        <div className="space-y-1 px-4 py-3">
          <Link
            href="/analyzer"
            className={`block rounded-lg px-3 py-2 text-base font-medium transition-colors duration-200 ${
              router.pathname === '/analyzer'
                ? 'bg-blue-100 text-blue-700'
                : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
            }`}
          >
            Statement Analyzer
          </Link>
          <Link
            href="/dashboard"
            className={`block rounded-lg px-3 py-2 text-base font-medium transition-colors duration-200 ${
              router.pathname === '/dashboard'
                ? 'bg-blue-100 text-blue-700'
                : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
            }`}
          >
            Dashboard
          </Link>
          <button
            onClick={toggleChatPanel}
            className="block w-full text-left rounded-lg px-3 py-2 text-base font-medium text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200"
          >
            {isChatPanelVisible ? 'Hide Chat' : 'Show Chat'}
          </button>
        </div>
      </div>
    </nav>
  );
}
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang="en">
      <Head>
        <link 
          href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" 
          rel="stylesheet"
        />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
