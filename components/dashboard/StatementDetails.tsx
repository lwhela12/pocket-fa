import { StatementSummary } from '../../pages/api/statement-upload';interface StatementDetailsProps {  data: StatementSummary;}const formatCurrency = (amount: number) => {  return new Intl.NumberFormat('en-US', {    style: 'currency',    currency: 'USD',    minimumFractionDigits: 2,    maximumFractionDigits: 2,  }).format(amount);};const Card: React.FC<{ title: string; children: React.ReactNode; className?: string }> = ({ title, children, className }) => (  <div className={`bg-white shadow-md rounded-lg p-6 ${className}`}>    <h3 className="text-xl font-semibold text-gray-800 mb-4 border-b pb-3">{title}</h3>    <div className="space-y-4">{children}</div>  </div>);const OverallSummaryCard: React.FC<{ summary: any }> = ({ summary }) => {  if (!summary) return null;  const {     beginning_value = 0,    ending_value = 0,    change_in_value = 0,    asset_allocation = {},  } = summary;  return (    <Card title="Overall Investment Summary">      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">        <div>          <p className="text-sm text-gray-500">Beginning Value</p>          <p className="text-2xl font-semibold text-gray-800">{formatCurrency(beginning_value)}</p>        </div>        <div>          <p className="text-sm text-gray-500">Ending Value</p>          <p className="text-2xl font-semibold text-gray-800">{formatCurrency(ending_value)}</p>        </div>        <div>          <p className="text-sm text-gray-500">Net Change</p>          <p className={`text-2xl font-semibold ${change_in_value >= 0 ? 'text-green-600' : 'text-red-600'}`}>            {formatCurrency(change_in_value)}          </p>        </div>      </div>      {Object.keys(asset_allocation).length > 0 && (        <div className="mt-6">          <h4 className="font-semibold text-center mb-2">Asset Allocation</h4>          <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">            {Object.entries(asset_allocation).map(([key, value]: [string, any]) => (              <div key={key} className="p-2 bg-gray-50 rounded-lg text-center">                <p className="font-medium capitalize">{key.replace(/_/g, ' ')}</p>                <p className="text-gray-600">{value.percentage}%</p>              </div>            ))}          </div>        </div>      )}    </Card>  );};const HoldingsTable: React.FC<{ holdings: any[] }> = ({ holdings }) => (  <div className="overflow-x-auto">    <table className="min-w-full text-sm text-left text-gray-600">      <thead className="bg-gray-100 text-xs text-gray-700 uppercase">        <tr>          <th scope="col" className="px-4 py-3">Description</th>          <th scope="col" className="px-4 py-3 text-right">Quantity</th>          <th scope="col" className="px-4 py-3 text-right">Price</th>          <th scope="col" className="px-4 py-3 text-right">Value</th>        </tr>      </thead>      <tbody>        {holdings.map((h, i) => (          <tr key={i} className="border-b hover:bg-gray-50">            <td className="px-4 py-3 font-medium text-gray-900">{h.description}{h.symbol && ` (${h.symbol})`}</td>            <td className="px-4 py-3 text-right">{h.quantity?.toLocaleString() ?? 'N/A'}</td>            <td className="px-4 py-3 text-right">{formatCurrency(h.price)}</td>            <td className="px-4 py-3 text-right font-semibold">{formatCurrency(h.value)}</td>          </tr>        ))}      </tbody>    </table>  </div>);const AccountSection: React.FC<{ title: string; accounts: any[] }> = ({ title, accounts }) => {  if (!accounts || accounts.length === 0) return null;  return (    <Card title={title}>      {accounts.map((account, index) => (        <div key={index} className="p-4 border rounded-lg bg-gray-50 space-y-4">          <div className="flex justify-between items-baseline">            <div>                <h4 className="font-bold text-lg text-gray-700">{account.account_name || account.policy_name}</h4>                <p className="text-sm text-gray-500">{account.account_number}</p>            </div>            <p className="text-lg font-semibold text-primary">Total Value: {formatCurrency(account.total_value)}</p>          </div>          {account.holdings && account.holdings.length > 0 && (            <div>              <h5 className="font-semibold mb-2 text-gray-600">Individual Holdings</h5>              <HoldingsTable holdings={account.holdings} />            </div>          )}        </div>      ))}    </Card>  );};export default function StatementDetails({ data }: StatementDetailsProps) {  if (!data) {    return <p>No statement data available.</p>;  }  return (    <div className="space-y-8">      {data.qualitativeSummary && (        <Card title="AI Summary">          <p className="text-gray-700 leading-relaxed">{data.qualitativeSummary}</p>        </Card>      )}      {data.overall_investment_summary && <OverallSummaryCard summary={data.overall_investment_summary} />}      <AccountSection title="Personal Investment Accounts" accounts={data.personal_investment_accounts} />      <AccountSection title="Retirement & Tax-Qualified Accounts" accounts={data.retirement_investment_accounts_tax_qualified} />      <AccountSection title="Insurance Accounts" accounts={data.insurance_accounts} />    </div>  );}